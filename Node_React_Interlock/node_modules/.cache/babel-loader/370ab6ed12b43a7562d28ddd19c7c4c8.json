{"ast":null,"code":"var _jsxFileName = \"/Users/lgh12/Web/Interlock_Project/Node_React_Interlock/src/components/Body/Login.js\";\nimport React, { Component } from 'react';\nimport '../css/Login.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.Gettitles = this.Gettitles.bind(this);\n    this.SendPostdata = this.SendPostdata.bind(this);\n  }\n\n  Gettitles() {\n    return this.props.topics.map(topic => /*#__PURE__*/_jsxDEV(\"button\", {\n      //onClick={this.titleClick.bind(this, topic.title)}\n      value: topic.id,\n      onClick: function (e) {\n        e.preventDefault();\n        this.props.onChangePage(e.target.value);\n      }.bind(this),\n      children: [topic.title, ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this));\n  }\n\n  SendPostdata(_data, _url) {\n    axios({\n      method: 'post',\n      url: _url,\n      data: {\n        email: _data.email,\n        password: _data.password\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body-left\",\n        children: [\" \", this.Gettitles(), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body-right\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"body-create\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            action: \"http://localhost:3001/auth/login_process\",\n            method: \"post\"\n            /**\n             * submit 버튼을 클릭했을 때, submit 버튼을 포함하고 있는 form 태그 내부 OnSubmit을 호출하게 된다.\n             *\n             * e.preventDefault() 함수를 쓰면 화면이 /create_process로 이동되는 것을 방지해 준다.\n             *\n             * 현재 우리는 page 전환 없이 만들려고하는 중\n             *  */\n            ,\n            onSubmit: function (e) {\n              // onSubmit의 e.target property는 form data를 담고 있다.\n              // props인 _title, _desc에 아래 e.target.title.value, e.target.desc.value를 넘겨준다.\n              this.props.onSubmit(e.target.email.value, e.target.password.value); // POST 요청 전송\n\n              this.SendPostdata({\n                title: e.target.email.value,\n                description: e.target.password.value\n              }, 'http://localhost:3001/auth/login_process');\n            }.bind(this),\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"email\",\n                placeholder: \"email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                name: \"password\",\n                placeholder: \"password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"submit\",\n                value: \"login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["/Users/lgh12/Web/Interlock_Project/Node_React_Interlock/src/components/Body/Login.js"],"names":["React","Component","axios","Login","constructor","props","Gettitles","bind","SendPostdata","topics","map","topic","id","e","preventDefault","onChangePage","target","value","title","_data","_url","method","url","data","email","password","render","onSubmit","description"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport '../css/Login.css'\nimport axios from 'axios'\n\nclass Login extends Component {\n  constructor(props) {\n    super(props)\n\n    this.Gettitles = this.Gettitles.bind(this)\n    this.SendPostdata = this.SendPostdata.bind(this)\n  }\n  Gettitles() {\n    return this.props.topics.map(topic => (\n      <button\n        //onClick={this.titleClick.bind(this, topic.title)}\n        value={topic.id}\n        onClick={function (e) {\n          e.preventDefault()\n          this.props.onChangePage(e.target.value)\n        }.bind(this)}\n      >\n        {topic.title}{' '}\n      </button>\n    ))\n  }\n\n  SendPostdata(_data, _url) {\n    axios({\n      method: 'post',\n      url: _url,\n      data: {\n        email: _data.email,\n        password: _data.password,\n      },\n    })\n  }\n  render() {\n    return (\n      <div className=\"body-container\">\n        <div className=\"body-left\"> {this.Gettitles()} </div>{' '}\n        <div className=\"body-right\">\n          <div className=\"body-create\">\n            <form\n              action=\"http://localhost:3001/auth/login_process\"\n              method=\"post\"\n              /**\n               * submit 버튼을 클릭했을 때, submit 버튼을 포함하고 있는 form 태그 내부 OnSubmit을 호출하게 된다.\n               *\n               * e.preventDefault() 함수를 쓰면 화면이 /create_process로 이동되는 것을 방지해 준다.\n               *\n               * 현재 우리는 page 전환 없이 만들려고하는 중\n               *  */\n              onSubmit={function (e) {\n                // onSubmit의 e.target property는 form data를 담고 있다.\n                // props인 _title, _desc에 아래 e.target.title.value, e.target.desc.value를 넘겨준다.\n                this.props.onSubmit(\n                  e.target.email.value,\n                  e.target.password.value\n                )\n                // POST 요청 전송\n                this.SendPostdata(\n                  {\n                    title: e.target.email.value,\n                    description: e.target.password.value,\n                  },\n                  'http://localhost:3001/auth/login_process'\n                )\n              }.bind(this)}\n            >\n              <p>\n                <input type=\"text\" name=\"email\" placeholder=\"email\" />\n              </p>\n              <p>\n                <input\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"password\"\n                ></input>\n              </p>\n              <p>\n                <input type=\"submit\" value=\"login\" />\n              </p>\n            </form>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Login\n"]},"metadata":{},"sourceType":"module"}